// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        Effect_Ratio: { value: 0.5 }
        Effect_Position: { value: [1, 1] }
        center: { value: [0.5, 0.5] }
        bullet_center: { value: [0.0, 0.0] }
        Effect_Size: { value: 0.25 }
        Width_Scale: { value: 0.66 }
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%



CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform GDG_Input {
    vec2 Effect_Position;
    vec2 center;
    vec2 bullet_center;
    float Effect_Ratio;
    float Effect_Size;
    float Width_Scale;
    float sys_time;
  };

  vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {
    if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    }
    return texture(texture, v_uv0);
  }

  void main_bak () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 c = v_color * texture2D(texture, v_uv0);
    vec4 color = texture2D(texture, v_uv0);

    float dis = sqrt((v_uv0.x-center.x)*(v_uv0.x-center.x)+(v_uv0.y-center.y)*(v_uv0.y-center.y));

    if( dis > 0.03) {
        o = c;
    } else {
        o = vec4(0, 0, 0, 0);
        //o.a = smoothstep(-0.2, 0.2, dis);
        o.a = dis * 10.0;
    }

    //o = vec4(0, 0, 0, 0);
    //o.a = dis * 10.0;

    gl_FragColor = o; 
  }

float Hash( vec2 p)
{
    vec3 p2 = vec3(p.xy,1.0);
    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*758.5453123);
}

float noise(in vec2 p)
{
    vec2 i = floor(p);
    vec2 f = fract(p);
    f *= f * (3.0-2.0*f);

    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),
               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),
               f.y);
}

float fbm(vec2 p)
{
     float v = 0.0;
     v += noise(p*1.)*.100;
     v += noise(p*2.)*.25;
     v += noise(p*4.)*.125;
     v += noise(p*8.)*.0625;
     return v;
}

void main1( void ) 
{
    //vec2 uv = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;
    //v_uv0.x *= resolution.x/resolution.y;

    vec3 finalColor = vec3( 0.0 );
    for( int i=1; i < 8; ++i )
    {
        float t = abs(1.0 / ((v_uv0.y - 0.8 + fbm( v_uv0 + sys_time/float(i))) * 575.));
        finalColor +=  t * vec3( float(i) * 0.1 +0.1, 0.5, 2.0 );
    }

    gl_FragColor = vec4( finalColor, 0.5 );
}

void main()
{
    vec4 src_color = texture2D(texture, v_uv0);

    float width = 0.1;
    float start = sys_time * 0.6;
    float strength = 0.01;
    float offset = 0.2;
    
    if( v_uv0.x < (start - offset * v_uv0.y) &&  v_uv0.x > (start - offset * v_uv0.y - width))
    {
        vec3 improve = strength * vec3(255.0, 255.0, 255.0);
        vec3 result = improve * vec3( src_color.r, src_color.g, src_color.b);
        gl_FragColor = vec4(result, src_color.a);
    } else {
        gl_FragColor = src_color;
    }
}

}%
