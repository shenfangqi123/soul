{
  "ver": "1.0.25",
  "uuid": "4fd2f844-7c38-4ce1-84af-6a81e539395c",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform float sys_time;\nfloat Hash( vec2 p)\n{\n    vec3 p2 = vec3(p.xy,1.0);\n    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*758.5453123);\n}\nfloat noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f *= f * (3.0-2.0*f);\n    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\nfloat fbm(vec2 p)\n{\n     float v = 0.0;\n     v += noise(p*1.)*.100;\n     v += noise(p*2.)*.25;\n     v += noise(p*4.)*.125;\n     v += noise(p*8.)*.0625;\n     return v;\n}\nvoid main( void )\n{\n    vec4 src_color = texture2D(texture, v_uv0);\n    vec3 result;\n    vec3 finalColor = vec3(src_color.r, src_color.g, src_color.b);\n    for( int i=1; i < 8; ++i )\n    {\n        float t = abs(1.0 / ((v_uv0.x - 0.5 + fbm( v_uv0 + sys_time/float(i)))*575.));\n        finalColor +=  t * vec3( float(i) * 0.1 +0.1, 0.5, 2.0 );\n    }\n    result += finalColor;\n    gl_FragColor = vec4(result, src_color.a);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform GDG_Input {\n    vec2 Effect_Position;\n    vec2 center;\n    vec2 bullet_center;\n    float Effect_Ratio;\n    float Effect_Size;\n    float Width_Scale;\n    float sys_time;\n  };\nfloat Hash( vec2 p)\n{\n    vec3 p2 = vec3(p.xy,1.0);\n    return fract(sin(dot(p2,vec3(37.1,61.7, 12.4)))*758.5453123);\n}\nfloat noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f *= f * (3.0-2.0*f);\n    return mix(mix(Hash(i + vec2(0.,0.)), Hash(i + vec2(1.,0.)),f.x),\n               mix(Hash(i + vec2(0.,1.)), Hash(i + vec2(1.,1.)),f.x),\n               f.y);\n}\nfloat fbm(vec2 p)\n{\n     float v = 0.0;\n     v += noise(p*1.)*.100;\n     v += noise(p*2.)*.25;\n     v += noise(p*4.)*.125;\n     v += noise(p*8.)*.0625;\n     return v;\n}\nvoid main( void )\n{\n    vec4 src_color = texture2D(texture, v_uv0);\n    vec3 result;\n    vec3 finalColor = vec3(src_color.r, src_color.g, src_color.b);\n    for( int i=1; i < 8; ++i )\n    {\n        float t = abs(1.0 / ((v_uv0.x - 0.5 + fbm( v_uv0 + sys_time/float(i)))*575.));\n        finalColor +=  t * vec3( float(i) * 0.1 +0.1, 0.5, 2.0 );\n    }\n    result += finalColor;\n    gl_FragColor = vec4(result, src_color.a);\n}"
      }
    }
  ],
  "subMetas": {}
}