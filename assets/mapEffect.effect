// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        Effect_Ratio: { value: 0.5 }
        Effect_Position: { value: [1, 1] }
        center: { value: [0.5, 0.5] }
        bullet_center: { value: [0.0, 0.0] }
        Effect_Size: { value: 0.25 }
        Width_Scale: { value: 0.66 }
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%



CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform GDG_Input {
    vec2 Effect_Position;
    vec2 center;
    vec2 bullet_center;
    float Effect_Ratio;
    float Effect_Size;
    float Width_Scale;
    float sys_time;
    vec2 resolution;
  };

  vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {
    if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    }
    return texture(texture, v_uv0);
  }

  void main_bak () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 c = v_color * texture2D(texture, v_uv0);
    vec4 color = texture2D(texture, v_uv0);

    float dis = sqrt((v_uv0.x-center.x)*(v_uv0.x-center.x)+(v_uv0.y-center.y)*(v_uv0.y-center.y));

    if( dis > 0.03) {
        o = c;
    } else {
        o = vec4(0, 0, 0, 0);
        //o.a = smoothstep(-0.2, 0.2, dis);
        o.a = dis * 10.0;
    }

    //o = vec4(0, 0, 0, 0);
    //o.a = dis * 10.0;

    gl_FragColor = o; 
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    float minAlpha = 1.0;
    float dis = 1.0;
    float intensity = 0.0;
    float radius_hero = 0.1; 
    float radius_bullet = 0.06;
    
    dis = sqrt(pow(v_uv0.x-center.x, 2.0) + pow(v_uv0.y-center.y, 2.0));
    vec2 lightPos = vec2(center.x, center.y);
    intensity += pow(1.0-clamp(dis/radius_hero, 0.0, 1.0), 2.0);

    dis = sqrt(pow(v_uv0.x-bullet_center.x, 2.0) + pow(v_uv0.y-bullet_center.y, 2.0));
    lightPos = vec2(bullet_center.x, bullet_center.y);
    intensity += pow(1.0-clamp(dis/radius_bullet, 0.0, 1.0), 2.0);

    minAlpha = 1.0 - intensity;
    o = vec4(0, 0, 0, 0);
    o.a = minAlpha;

/*
    dis = sqrt((v_uv0.x-center.x)*(v_uv0.x-center.x)+(v_uv0.y-center.y)*(v_uv0.y-center.y));
    if(dis*10.0 < minAlpha) {
        minAlpha = dis*10.0;
    }

    dis = sqrt((v_uv0.x-0.55)*(v_uv0.x-0.55)+(v_uv0.y-0.55)*(v_uv0.y-0.55)); 
    if(dis*10.0 < minAlpha) {
        minAlpha = dis*10.0;
    }

    o = vec4(0, 0, 0, 0);
    o.a = minAlpha;
*/

    gl_FragColor = o; 
  }

}%
