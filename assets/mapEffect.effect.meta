{
  "ver": "1.0.25",
  "uuid": "cecaa653-a964-401e-9aef-03b2bb2a6ef1",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 center;\nuniform vec2 bullet_center;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float minAlpha = 1.0;\n  float dis = 1.0;\n  float intensity = 0.0;\n  float radius_hero = 0.1;\n  float radius_bullet = 0.06;\n  dis = sqrt(pow(v_uv0.x-center.x, 2.0) + pow(v_uv0.y-center.y, 2.0));\n  vec2 lightPos = vec2(center.x, center.y);\n  intensity += pow(1.0-clamp(dis/radius_hero, 0.0, 1.0), 2.0);\n  dis = sqrt(pow(v_uv0.x-bullet_center.x, 2.0) + pow(v_uv0.y-bullet_center.y, 2.0));\n  lightPos = vec2(bullet_center.x, bullet_center.y);\n  intensity += pow(1.0-clamp(dis/radius_bullet, 0.0, 1.0), 2.0);\n  minAlpha = 1.0 - intensity;\n  o = vec4(0, 0, 0, 0);\n  o.a = minAlpha;\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform GDG_Input {\n  vec2 Effect_Position;\n  vec2 center;\n  vec2 bullet_center;\n  float Effect_Ratio;\n  float Effect_Size;\n  float Width_Scale;\n  float sys_time;\n  vec2 resolution;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  float minAlpha = 1.0;\n  float dis = 1.0;\n  float intensity = 0.0;\n  float radius_hero = 0.1;\n  float radius_bullet = 0.06;\n  dis = sqrt(pow(v_uv0.x-center.x, 2.0) + pow(v_uv0.y-center.y, 2.0));\n  vec2 lightPos = vec2(center.x, center.y);\n  intensity += pow(1.0-clamp(dis/radius_hero, 0.0, 1.0), 2.0);\n  dis = sqrt(pow(v_uv0.x-bullet_center.x, 2.0) + pow(v_uv0.y-bullet_center.y, 2.0));\n  lightPos = vec2(bullet_center.x, bullet_center.y);\n  intensity += pow(1.0-clamp(dis/radius_bullet, 0.0, 1.0), 2.0);\n  minAlpha = 1.0 - intensity;\n  o = vec4(0, 0, 0, 0);\n  o.a = minAlpha;\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}